name: Deploy Stellar-Dominion to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
      branch:
        description: 'Branch to deploy from'
        required: false
        default: 'main'
        type: string

env:
  AWS_REGION: us-east-2
  NODE_VERSION: '18'
  PHP_VERSION: '8.1'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch != '' && github.event.inputs.branch || github.ref }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo, pdo_mysql, curl, json, mbstring
          coverage: xdebug

      - name: Cache Composer
        uses: actions/cache@v3
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock', '**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --no-dev

      - name: Run PHP syntax check
        run: find Stellar-Dominion -name "*.php" -exec php -l {} \;

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Validate serverless configuration
        run: npx serverless print --stage prod

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    # Grant GITHUB_TOKEN permissions for OIDC
    permissions:
      id-token: write
      contents: read
    
    strategy:
      matrix:
        stage: 
          - ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.stage || 'prod' }}
    
    environment:
      name: ${{ matrix.stage }}
      url: ${{ steps.deploy.outputs.endpoint }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch != '' && github.event.inputs.branch || github.ref }}

      - name: Show deployment info
        run: |
          echo "🚀 Deployment Information:"
          echo "- Stage: ${{ matrix.stage }}"
          echo "- Branch: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch != '' && github.event.inputs.branch || github.ref_name }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Trigger: ${{ github.event_name }}"

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: stellar-dominion-github-actions
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity
          echo "AWS CLI version: $(aws --version)"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo, pdo_mysql, curl, json, mbstring

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Composer
        uses: actions/cache@v3
        with:
          path: |
            ~/.composer/cache
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock', '**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Cache Serverless
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.serverless
          key: ${{ runner.os }}-serverless-${{ hashFiles('**/package-lock.json', '**/serverless.yml') }}
          restore-keys: |
            ${{ runner.os }}-serverless-

      - name: Install dependencies
        run: |
          composer install --prefer-dist --no-progress --no-suggest --no-dev --optimize-autoloader
          npm ci

      - name: Install Serverless Framework
        run: npm install -g serverless@3

      - name: Deploy infrastructure and application
        id: deploy
        run: |
          echo "Deploying to stage: ${{ matrix.stage }}"
          
          # Deploy with Serverless Framework
          serverless deploy --stage ${{ matrix.stage }} --verbose
          
          # Get the API endpoint from CloudFormation outputs
          ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name starlight-dominion-api-${{ matrix.stage }} \
            --query 'Stacks[0].Outputs[?OutputKey==`HttpApiUrl`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$ENDPOINT" ]; then
            echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT
            echo "✅ Deployment successful! API endpoint: $ENDPOINT"
          else
            echo "⚠️ Could not retrieve API endpoint"
          fi
        env:
          STAGE: ${{ matrix.stage }}

      - name: Run post-deployment tests
        if: steps.deploy.outcome == 'success'
        run: |
          # Wait for the API to be ready
          sleep 30
          
          # Basic health check
          if [ -n "${{ steps.deploy.outputs.endpoint }}" ]; then
            curl -f "${{ steps.deploy.outputs.endpoint }}/debug_info.php" || echo "Health check endpoint not available"
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Stage**: ${{ matrix.stage }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch != '' && github.event.inputs.branch || github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.deploy.outputs.endpoint }}" ]; then
            echo "- **Endpoint**: ${{ steps.deploy.outputs.endpoint }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: Cleanup (Manual Trigger Only)
    runs-on: ubuntu-latest
    if: false  # Disabled since no test environment exists
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Cleanup disabled
        run: echo "Cleanup job disabled - no test environment configured"