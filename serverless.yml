# =============================================================================
# Stellar Dominion Serverless Configuration
# =============================================================================
# This configuration deploys a PHP-based game to AWS Lambda using Bref
# Components: API Gateway, Lambda functions, Aurora Serverless v2, S3, DynamoDB
# =============================================================================

service: starlight-dominion-api
org: rayprogramming
app: starlight-dominion

# Observability and Tracing Configuration (uncomment to enable)
# Requires Serverless Framework subscription
# stages:
#   prod:
#     observability: true
#     tracing:*
#         apiGateway: true
#         lambda: true
#   test:
#     observability: true
#   default:
#     observability: false

# Set your team ID if you are using Bref Cloud for enhanced monitoring/support
#bref:
#    team: my-team-id

custom:
  # VPC Configuration for Aurora Serverless v2 access
  # Lambda functions must be in same VPC as Aurora for database connectivity
  vpcConfig:
    securityGroupIds:
      - sg-0ff35eedea137486d  # Security group allowing Lambda to Aurora access
    subnetIds:
      # Private subnets across multiple AZs for high availability
      - subnet-0a3a705e98b18cbdf  # Private subnet AZ-1
      - subnet-0b8171e30dd1a53e2  # Private subnet AZ-2  
      - subnet-0417dd0fe869aaa57  # Private subnet AZ-3

  # Shared environment variables for all Lambda functions (DRY principle)
  # Reference with ${self:custom.sharedEnv} to avoid duplication
  sharedEnv: &sharedEnvironment
    DYNAMODB_SESSION_TABLE: ${self:provider.environment.DYNAMODB_SESSION_TABLE}
    APP_AWS_REGION: ${self:provider.environment.APP_AWS_REGION}
    DB_HOST: ${self:provider.environment.DB_HOST}
    DB_NAME: ${self:provider.environment.DB_NAME}
    DB_SECRET_ARN: ${self:provider.environment.DB_SECRET_ARN}
    FILE_STORAGE_DRIVER: ${self:provider.environment.FILE_STORAGE_DRIVER}
    FILE_STORAGE_S3_BUCKET: ${self:provider.environment.FILE_STORAGE_S3_BUCKET}
    FILE_STORAGE_S3_REGION: ${self:provider.environment.FILE_STORAGE_S3_REGION}
    SESSION_COOKIE_DOMAIN: ${self:custom.domainName.${sls:stage}, self:custom.domainName.default}

  # Domain mapping per stage
  domainName:
    prod: sd.rayprogramming.com
    test: test.sd.rayprogramming.com
    default: dev.sd.rayprogramming.com
  
  scriptable:
    hooks:
      after:deploy:deploy: npm run sync-assets
  
  # Lambda Insights configuration for performance monitoring
  lambdaInsights:
    defaultLambdaInsights: true  # Enable Lambda Insights for all functions
  
  # AWS-provided Secrets Manager extension layer (compatible with Amazon Linux 2)
  SecretsManagerAgentLambdaLayer: arn:aws:lambda:us-east-2:590474943231:layer:AWS-Parameters-and-Secrets-Lambda-Extension:23

# =============================================================================
# Provider Configuration - AWS Lambda Settings
# =============================================================================
provider:
  name: aws
  region: us-east-2  # Ohio region - cost-effective for US deployments
  
  # CloudWatch Logs configuration for Lambda functions
  logRetentionInDays: 7  # Set log retention to 7 days for cost optimization
  
  # AWS X-Ray tracing configuration for observability
  tracing:
    lambda: true   # enables X-Ray active tracing for all functions
    apiGateway: true  # enables X-Ray tracing for API Gateway
    
  # HTTP API configuration with detailed metrics
  httpApi:
    metrics: true  # Enable detailed CloudWatch metrics for HTTP API
    cors: true     # Enable CORS for browser-based requests
  # Global environment variables available to all Lambda functions
  environment:
    # DynamoDB session storage configuration
    DYNAMODB_SESSION_TABLE: ${self:service}-sessions-${sls:stage}
    APP_AWS_REGION: ${self:provider.region}
    
    # Aurora Serverless v2 Database Configuration
    # Uses AWS Secrets Manager for credential management with auto-rotation
    DB_HOST: starlight-dominion.cl8ugqwekrkc.us-east-2.rds.amazonaws.com
    DB_NAME: users
    DB_SECRET_ARN: !Ref DatabaseCredentialsSecret  # Reference to secret resource below
    
    # File Storage Configuration (S3 bucket for user uploads: avatars, documents)
    # CloudFront CDN automatically created by serverless-lift website construct
    FILE_STORAGE_DRIVER: s3                        # Use S3 for file storage in Lambda
    FILE_STORAGE_S3_BUCKET: !Ref FileStorageBucket
    FILE_STORAGE_S3_REGION: ${self:provider.region} # S3 region matches Lambda region
    # AWS Parameters and Secrets Extension configuration
    # The AWS extension uses different environment variables than custom implementations
    PARAMETERS_SECRETS_EXTENSION_CACHE_ENABLED: true
    PARAMETERS_SECRETS_EXTENSION_CACHE_SIZE: 1000
    PARAMETERS_SECRETS_EXTENSION_HTTP_PORT: 2773
    PARAMETERS_SECRETS_EXTENSION_MAX_CONNECTIONS: 3
  # IAM permissions for Lambda functions
  iam:
    role:
      statements:
        # DynamoDB permissions for session management
        - Effect: Allow
          Action:
            - dynamodb:GetItem      # Read session data
            - dynamodb:PutItem      # Create new sessions
            - dynamodb:UpdateItem   # Update existing sessions
            - dynamodb:DeleteItem   # Remove expired sessions
            - dynamodb:Scan         # Admin operations (use sparingly)
            - dynamodb:Query        # Efficient session lookups
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SESSION_TABLE}"
            
        # Aurora Serverless v2 database connection permission
        - Effect: Allow
          Action:
            - rds-db:connect  # IAM database authentication
          Resource:
            - "arn:aws:rds-db:${self:provider.region}:*:dbuser:starlight-dominion-db/admin"
            
        # Secrets Manager permission for database credentials
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue  # Retrieve database credentials
          Resource:
            - "arn:aws:secretsmanager:${self:provider.region}:*:secret:${self:service}-db-credentials-*"
            
        # S3 permissions for file storage operations
        - Effect: Allow
          Action:
            - s3:GetObject      # Download files
            - s3:PutObject      # Upload files  
            - s3:DeleteObject   # Remove files
            - s3:ListBucket     # Browse bucket contents
          Resource:
            - !Sub "arn:aws:s3:::${FileStorageBucket}/*"  # Object-level permissions
            - !Sub "arn:aws:s3:::${FileStorageBucket}"    # Bucket-level permissions
            
        # AWS X-Ray permissions for distributed tracing
        - Effect: Allow
          Action:
            - xray:PutTraceSegments           # Submit trace data
            - xray:PutTelemetryRecords        # Submit telemetry data
            - xray:GetSamplingRules           # Retrieve sampling configuration
            - xray:GetSamplingTargets         # Get sampling targets
            - xray:GetSamplingStatisticSummaries  # Get sampling statistics
          Resource: "*"
          
        # CloudWatch and Lambda Insights permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup             # Create log groups
            - logs:CreateLogStream            # Create log streams  
            - logs:PutLogEvents               # Write log events
            - logs:DescribeLogStreams         # Read log stream information
            - logs:DescribeLogGroups          # Describe log groups
            - cloudwatch:PutMetricData        # Publish custom metrics
            - lambda:GetLayerVersion          # Access Lambda Insights layer
          Resource: "*"

# =============================================================================
# Serverless Framework Plugins
# =============================================================================
plugins:
  - ./vendor/bref/bref      # PHP runtime for AWS Lambda
  # - serverless-lift         # Higher-level constructs (server-side websites)
  - serverless-scriptable-plugin
  - serverless-plugin-lambda-insights  # Lambda performance monitoring

# constructs:
  # Server-side website construct for static assets AND dynamic requests
  # CloudFront distribution serves assets from S3 and proxies API requests to Lambda
  # website:
  #   type: server-side-website
  #   domain: ${self:custom.domainName.${sls:stage}, self:custom.domainName.default}
  #   # Note: CloudFront requires certificate in us-east-1 region
  #   certificate: arn:aws:acm:us-east-1:019076941043:certificate/52ad640b-220b-4fda-a09b-80ca90237671
  #   assets:
  #     '/assets/*': Stellar-Dominion/public/assets      # CSS, JS, images
  #     '/favicon.ico': Stellar-Dominion/public/assets/img/favicon.ico
  #     '/robots.txt': Stellar-Dominion/public/robots.txt
# =============================================================================
# Lambda Functions Configuration
# =============================================================================
functions:
  # Main API function - handles all HTTP requests
  api:
    handler: Stellar-Dominion/public/index.php  # Entry point for PHP application
    description: "main handler for Stellar Dominion API with file upload support"
    runtime: php-83-fpm
    timeout: 29 # API Gateway max is 30s, file uploads via VPC S3 endpoint should be fast
    vpc: ${self:custom.vpcConfig}  # Required for Aurora Serverless v2 access + S3 VPC endpoint
    # Function-specific environment variables (inherits from provider.environment)
    environment: 
      <<: *sharedEnvironment
    layers:
      - ${self:custom.SecretsManagerAgentLambdaLayer}
    # Explicit tracing configuration for this function
    tracing: Active
    events:
      - httpApi: '*'
    
  # Background job processor - handles game turn processing
  turnProcessor:
    handler: Stellar-Dominion/src/Lambda/TurnProcessorHandler.php
    description: "process game turns every 10 minutes"
    runtime: php-83-console
    vpc: ${self:custom.vpcConfig}  # Database access required
    environment: *sharedEnvironment
    layers:
      - ${self:custom.SecretsManagerAgentLambdaLayer}
    events:
      - schedule:
          rate: rate(10 minutes)  # CloudWatch Events trigger every 10 minutes

  # Hourly interest accrual job - runs at 5 minutes past each hour
  accrueAllianceInterest:
    handler: Stellar-Dominion/src/Game/accrue_alliance_interest.php
    description: "accrue alliance bank interest every hour at minute 5"
    runtime: php-83-console
    vpc: ${self:custom.vpcConfig}  # Database access required
    environment: *sharedEnvironment
    layers:
      - ${self:custom.SecretsManagerAgentLambdaLayer}
    events:
      - schedule:
          # Run at minute 5 of every hour (UTC). Use AWS cron expression (6 fields) for precise scheduling.
          rate: cron(5 * * * ? *)

  # Dedicated API function for advisor polling - optimized for frequent requests
  advisorPoll:
    handler: Stellar-Dominion/src/Lambda/AdvisorPollHandler.php
    description: "Fast advisor polling API endpoint for real-time game state updates"
    runtime: php-83-fpm
    timeout: 10
    vpc: ${self:custom.vpcConfig}  # Database access required
    environment: 
      <<: *sharedEnvironment
    layers:
      - ${self:custom.SecretsManagerAgentLambdaLayer}
    # Explicit tracing configuration for this function
    tracing: Active
    events:
      - httpApi:
          path: /api/advisor_poll.php
          method: GET

  # Unified API handler for all remaining /api/ endpoints
  apiHandler:
    handler: Stellar-Dominion/src/Lambda/ApiHandler.php
    description: "Unified handler for all /api/ endpoints (except advisor_poll)"
    runtime: php-83-fpm  # PHP 8.1 with FastCGI Process Manager
    timeout: 15  # Standard timeout for API operations
    vpc: ${self:custom.vpcConfig}  # Database access required
    environment: 
      <<: *sharedEnvironment
    layers:
      - ${self:custom.SecretsManagerAgentLambdaLayer}
    # Explicit tracing configuration for this function
    tracing: Active
    events:
      - httpApi:
          path: /api/{proxy+}
          method: ANY

# =============================================================================
# Deployment Package Configuration
# =============================================================================
# Exclude files from deployment to reduce package size and improve cold start times
package:
  patterns:
    - "!node_modules/**"      # Node.js dependencies (not needed in Lambda)
    - "!tests/**"             # Unit/integration tests
    - "!vendor/bin/**"        # Composer binary files
    - "!logs/**"              # Local log files
    - "!docker/**"            # Docker configuration
    - "!docker-compose.yml"   # Local development files
    - "!.env"                 # Environment files (use environment variables instead)
    - "!Stellar-Dominion/.env"
    - "!secrets-manager-agent/**"
    - "!**.md"              # Markdown documentation
    - "!.github/**"          # GitHub configuration files
    - "!serverless.yml"      # Exclude self to avoid recursion
    - "!docker/**"
    - "!docker-compose.yml"

# =============================================================================
# CloudFormation Resources - AWS Infrastructure
# =============================================================================
resources:
  - ${file(./infrastructure/database.yml)}
  - ${file(./infrastructure/buckets.yml)}
  - ${file(./infrastructure/cdn.yml)}
  - ${file(./infrastructure/dns.yml)}
  - ${file(./infrastructure/observability.yml)}  # X-Ray sampling rules and monitoring
outputs:
    # S3 bucket name for external reference
    FileStorageBucketName:
      Description: Name of the S3 bucket for file storage
      Value: !Ref FileStorageBucket
      Export:
        Name: ${self:service}-${sls:stage}-FileStorageBucket

    # API Gateway URL for frontend integration
    ApiGatewayUrl:
        Description: API Gateway URL for the application
        Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
        Export:
            Name: ${self:service}-${sls:stage}-ApiUrl

    UploadsCloudFrontDomainName:
      Description: Domain name for uploads CloudFront distribution
      Value: !GetAtt CloudFrontDistribution.DomainName
      Export:
        Name: ${self:service}-${sls:stage}-UploadsCloudFrontDomainName
